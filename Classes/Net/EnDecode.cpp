// EnDecode.cpp : Defines the entry point for the DLL application.
//
#include "EnDecode.h"
#include "../Common/ZipUnit.h"
#include <string>
static unsigned char Decode6BitMask[5] = { 0xfc, 0xf8, 0xf0, 0xe0, 0xc0 };
static unsigned char EncodeBitMasks[256] = {
	0x8C, 0x87, 0x0D, 0x85, 0xD4, 0x64, 0x63, 0xE5, 0xBA, 0x7E, 0xB8, 0x68, 0x9D, 0x9F, 0xF5, 0xBC,
	0xA0, 0xE3, 0x3A, 0x22, 0x19, 0x21, 0x39, 0x78, 0xEE, 0x27, 0x36, 0x15, 0x74, 0xC7, 0x97, 0xC9,
	0xCE, 0xE2, 0x7B, 0x4C, 0x98, 0xA1, 0xC2, 0x59, 0x41, 0xC0, 0x1E, 0x2E, 0x95, 0xEB, 0xDE, 0x69,
	0x1D, 0x5B, 0x53, 0xDA, 0xF4, 0x0A, 0x4F, 0xBB, 0xB7, 0x24, 0x33, 0x0F, 0xC8, 0x84, 0x29, 0x89,
	0x3C, 0x1C, 0x08, 0x49, 0xC6, 0xFE, 0xCC, 0x23, 0x3E, 0xE1, 0x4E, 0x8B, 0x13, 0xE7, 0x1A, 0x5D,
	0xCF, 0xB1, 0x47, 0x8F, 0xD8, 0x72, 0x4B, 0x93, 0x6E, 0x73, 0x4D, 0x94, 0xDD, 0x82, 0x14, 0xA7,
	0x03, 0xF9, 0xF1, 0xC5, 0x8D, 0x79, 0x2A, 0xC4, 0xDC, 0x60, 0x5F, 0xD7, 0x62, 0xB5, 0xE9, 0xB3,
	0xB6, 0x12, 0xA8, 0x32, 0xD9, 0xC3, 0x6A, 0x75, 0x4A, 0xA2, 0x0C, 0x26, 0x91, 0x5A, 0xAD, 0x6D,
	0x44, 0x10, 0xB4, 0x46, 0x1B, 0x66, 0x81, 0x20, 0xFD, 0x7F, 0x88, 0x25, 0x9C, 0x71, 0xD3, 0xE6,
	0x80, 0xE4, 0xFA, 0x42, 0x9B, 0x37, 0x01, 0xFC, 0xDB, 0x45, 0x6B, 0xFB, 0x56, 0xF0, 0xAF, 0x9A,
	0xBF, 0xAB, 0xD6, 0xCD, 0x02, 0xF2, 0x7C, 0xAA, 0xB2, 0x92, 0xFF, 0x57, 0x2F, 0x86, 0xA6, 0x7D,
	0x35, 0x17, 0x34, 0xD5, 0x0E, 0x65, 0x09, 0x05, 0x28, 0xCA, 0x48, 0x31, 0x8E, 0x2D, 0xDF, 0x52,
	0xF6, 0x1F, 0xA4, 0x50, 0x76, 0x40, 0x18, 0x04, 0x8A, 0x16, 0x2B, 0xAE, 0x43, 0x3F, 0xD0, 0xCB,
	0x6C, 0x55, 0x54, 0x96, 0x99, 0x30, 0x67, 0x5E, 0x2C, 0xAC, 0xE0, 0x7A, 0xE8, 0x58, 0x90, 0xBE,
	0xA5, 0x6F, 0xB0, 0x70, 0xEC, 0x61, 0x5C, 0x06, 0x3B, 0x77, 0xC1, 0x07, 0xEA, 0xA9, 0xF8, 0x11,
	0xBD, 0xF3, 0x00, 0xED, 0x83, 0xEF, 0x3D, 0xA3, 0x51, 0x9E, 0x38, 0xF7, 0x0B, 0xB9, 0xD2, 0xD1
};
//尼玛 这不就是单字节的strlen
int memlen(const char *str)
{
	const char *eos = str;

	while(*eos++);

	return((int)(eos - str));
}

//wk 新增，替代strchr,为了控制搜索范围
char * strchr_ex(char *str, char ch, int len)
{
	char * pend = str + len;
	char * p = str;
	while (p < pend)
	{
		if (p[0] == 0) return nullptr;
		if (p[0] == ch) return p;
		p++;
	}
	return nullptr;
}

/* **************************************************************************************

		Encode/Decode Routine for ANSI character

   ************************************************************************************** */

int  fnEncode6BitBufA(char *pszSrc, char *pszDest, int nSrcLen, int nDestLen)
{
	int				nDestPos	= 0;
	int				nRestCount	= 0;
	unsigned char	chMade = 0, chRest = 0;
	unsigned char ch = 0;
	//int btIdx;
																																																																																				
	for (int i = 0; i < nSrcLen; i++)
	{
		if (nDestPos >= nDestLen) break;
		ch = pszSrc[i];
		//-----------------
		//btIdx = i % 256;
		//ch = ch^EncodeBitMasks[btIdx]^EncodeBitMasks[255-btIdx];
		//------------------

		chMade = ((chRest | (ch >> (2 + nRestCount))) & 0x3f);
		chRest = (((ch << (8 - (2 + nRestCount))) >> 2) & 0x3f);

		nRestCount += 2;
		if (nRestCount < 6)
			pszDest[nDestPos++] = chMade + 0x3c;
		else
		{
			if (nDestPos < nDestLen - 1)
			{
				pszDest[nDestPos++]	= chMade + 0x3c;
				pszDest[nDestPos++]	= chRest + 0x3c;
			}
			else
				pszDest[nDestPos++] = chMade + 0x3c;

			nRestCount	= 0;
			chRest		= 0;
		}
	}
	if (nRestCount > 0)
		pszDest[nDestPos++] = chRest + 0x3c;
	return nDestPos;
}

int   fnDecode6BitBufA(char *pszSrc, char *pszDest, int nDestLen,bool zipbuf/* = false*/)
{
	int				nLen = memlen((const char *)pszSrc) - 1;
	int				nDestPos = 0, nBitPos = 2;
	int				nMadeBit = 0;
	unsigned char	ch, chCode, tmp;
//	int btIdx;
	if(nLen <= 0 || !pszSrc || !pszDest)
	{
	//	CCLOG("fnDecode6BitBufA error %d",nLen);
		return 0;
	}
	for (int i = 0; i < nLen; i++)
	{
		if ((pszSrc[i] - 0x3c) >= 0)
			ch = pszSrc[i] - 0x3c;
		else
		{
			nDestPos = 0;
			break;
		}

		if (nDestPos >= nDestLen) break;

		if ((nMadeBit + 6) >= 8)
		{
			chCode = (tmp | ((ch & 0x3f) >> (6 - nBitPos)));

			//-----------------
			//btIdx = nDestPos % 256;
			//chCode = chCode^EncodeBitMasks[255-btIdx]^EncodeBitMasks[btIdx];
			//------------------


			pszDest[nDestPos++] = chCode;

			nMadeBit = 0;

			if (nBitPos < 6) 
				nBitPos += 2;
			else
			{
				nBitPos = 2;
				continue;
			}
		}
		tmp = ((ch << nBitPos) & Decode6BitMask[nBitPos - 2]);
		nMadeBit += (8 - nBitPos);
	}
	int nRetLen = nDestPos; 
	//是否zip压缩
	if(zipbuf)
	{
		//取长度
		int ziplen;
		memcpy(&ziplen,pszDest,sizeof(int));
		unsigned char* pzipData = UnCompression((unsigned char*)&pszDest[sizeof(int)],ziplen,nRetLen);
		memcpy(pszDest,pzipData,nRetLen);
		delete []pzipData;
		//FILE* f = fopen("c:\\1.dat","wb");
		//fwrite(pszDest,nRetLen,1,f);
		//fclose(f);
	
	}
	return nRetLen;
}

int DecodeString(char * src, char * des, int deslen)
{
	int n = fnDecode6BitBuf(src, des, deslen - 1);
	des[n] = 0;
	return n;
}

/*int WINAPI fnEncodeMessageA(PDEFAULTMESSAGE lptdm, char *pszBuf, int nLen)
{ return fnEncode6BitBufA((unsigned char *)lptdm, pszBuf, sizeof(DEFAULTMESSAGE), nLen); }*/
